apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    buildToolsVersion '29.0.3'
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.sufi.prayertimes"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        useLibrary 'org.apache.http.legacy'
        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexEnabled false
            multiDexKeepFile file('multidex_keep_file.txt')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // for applications
//    applicationVariants.all { variant ->
//        // old Gradle versions:
//        // variant.javaCompile.doLast {
//        // new Gradle versions:
//        variant.javaCompileProvider.get().doLast {
//            runAllatori(variant)
//        }
//    }

// for libraries
/*
    libraryVariants.all { variant ->
        // old Gradle versions:
        // variant.javaCompile.doLast {
        // new Gradle versions:
        variant.javaCompileProvider.get().doLast {
            runAllatori(variant)
        }
    }
*/
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-beta01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

//    GOOGLE LOCATON AND MAP LIBRARIES
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-places:17.0.0'
//    ANDROID DESIGN LIBRARIES
    implementation 'com.google.android.material:material:1.4.0-alpha01'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //    THIRD PARTY
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'joda-time:joda-time:2.9.6:no-tzdb'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'com.airbnb.android:lottie:3.6.1'
    implementation 'io.paperdb:paperdb:2.6'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'

    //    FIREBASE LIBRARIES
    implementation platform('com.google.firebase:firebase-bom:26.8.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-messaging:21.0.1'
    implementation 'com.google.firebase:firebase-core:18.0.2'
    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'com.firebase:geofire-android:2.1.1'


    implementation 'com.github.angads25:filepicker:1.1.1'
    implementation 'com.github.msarhan:ummalqura-calendar:1.1.9'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'

//    LEAK CANARAY
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'


    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    implementation 'com.github.jd-alexander:library:1.1.0'

}

def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        // old Gradle versions:
        // expand(classesRoot: variant.javaCompile.destinationDir,
        //        kotlinRoot: "${buildDir}/tmp/kotlin-classes/${variant.name}",
        //        androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
        //        classpathJars: variant.javaCompile.classpath.getAsPath(),
        //        logFile: "allatori-log-${variant.name}.xml")
        // new Gradle versions:
        expand(classesRoot: variant.javaCompileProvider.get().destinationDir,
                kotlinRoot: "${buildDir}/tmp/kotlin-classes/${variant.name}",
                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
                classpathJars: variant.javaCompileProvider.get().classpath.getAsPath(),
                logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    // old Gradle versions:
    // new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
    // new Gradle versions:
    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").deleteDir()

    // Kotlin support
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}-obfuscated").deleteDir()

    println("Test print:"+rootDir)
    println("Test print 2:"+buildDir)
    javaexec {
        main = 'com.sufi.prayertimes'
        classpath = files("$rootDir\\allatori\\allatori.jar")
        args "$buildDir\\intermediates\\classes\\allatori-${variant.name}.xml"
    }

    // old Gradle versions:
    // new File("${variant.javaCompile.destinationDir}").deleteDir()
    // new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))
    // new Gradle versions:
    new File("${variant.javaCompileProvider.get().destinationDir}").deleteDir()
    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").renameTo(new File("${variant.javaCompileProvider.get().destinationDir}"))

    // Kotlin support
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}").deleteDir()
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}-obfuscated").renameTo(new File("${buildDir}/tmp/kotlin-classes/${variant.name}"))
}

